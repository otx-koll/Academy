예외처리
call by value, call by reference
스레드 정리
runnable
mysql폴더 정리
js 정리


mysql 설치
spring 설치
기능사








===========
var, let, const 로 변수 선언
const : 변수 상수화 시킴. 상수 선언. 값 변경 불가능

let 변수는 가장 가까운 코드블록 기준으로 수명주기가 결정됨. 변수 재선언 불가능. 변수에 재할당 가능
var 변수는 가장 가까운 함수블록 기준으로 수명주기가 결정됨. 변수 재선언 가능
const : 변수 재선언, 재할당 모두 불가능

hoisting : var선언문이나 function 선언문 등을 해당 스코프의 선두로 옮긴 것처럼 동작하는 특성
: 코드에 선언된 변수 및 함수를 코드 상단으로 끌어올리는 것
(다시)

배열
자바스크립트에서의 배열나열 방법 : []

> 자바의 `for~each`문과 자바스크립트의 `for..of`문은 같다
> `for..of` : 반복 가능한 객체를 반복하는 문법
자바에서의 for( : )문은 자바스크립트에선 for( of )문이다.
=======================

연산자 우선순위
1. 괄호 ()
2. 단항연산자 + - 부호	++ -- 증감	! 부정
3. 산술연산자 * / %		+	-
	
자바와 달리 자바스크립트에서 나눗셈은 실수형 나눗셈만 수행함.
자바에서 5 / 2 -> 2
자바에서 5 / 2.0 -> 5.0 / 2.0 -> 2.5 (자바스크립트는 나눗셈은 실수형으로만 수행함)

4. 관계연산자	<	<=	>	>=	==	!=
5. 논라연산자	&&	||
6. 조건연산자	(조건식) ? 참값	: 거짓값
   삼항연산자
7. 대입연산자	=	+=	-=	*=	/=	%=


=================

조건문 : if, switch
반복문 : for, while, do~while

================

함수 : 자주쓰는 실행문들을 기능단위로 정의한 것.
필요할 때 함수 이름을 호출해서 사용함.
	
자바스크립트에서 함수정의는 브라우저에 의해
최우선적으로 메모리에 로딩됨. (가장 먼저 스캔됨)

==================
사용자 정의 함수 - 사용자가 직접 정의한 함수
내장 함수 - 이미 만들어져 있는 함수

==================
GUI(Graphic User Interface) : 그래픽기반 유저 인터페이스
이벤트 : 사용자 또는 프로그램 자체적으로 발생시키는 사건.
	발생하면 특정 대상에 신호를 줌.
이벤트 핸들러 : 이벤트를 처리하는 함수 정의.
		신호를 받으면 연결된 함수의 명령문을 실행함.
이벤트 소스 : 이벤트가 발생된 대상 (버튼 등)
		이벤트 핸들러를 등록하는 대상이 됨.
	
document 는 브라우저가 로딩한 문서정보를 가진 문서 객체이다.
	
이벤트 종류
click dblclick
mousedown mouseup mouseover mouseout mousemove
dragndrop
keydown keypress keyup
focus blur select change

=======================
window.open(새창에 보여질 주소, 창의 속성 또는 이름, 새로 띄어질 페이지의 모양)
이름을 지정해 주지 않으면 계속 새 창을 띄움

==========================
부모창에서 자식창으로의 접근은 보안문제로 제한되었음
자식창에서 부모창으로는 접근 가능함.

=============================
document.getElementById('id');
document.frm.id.value
window.opener.document.frm.id.value = frm.id.value;
opener.document.frm.id.value = frm.id.value;


opener.document.frm.id.value = frm.id.value;


부모 window의 document에서 name이 frm인 태그안에 name이 id인 태그의 값 
opener : 부모 window

















//① JDBC 드라이버 로딩
//
//② 데이터베이스 connection 연결
//
//③ 쿼리(sql)문장을 실행하기 위한 Statement / PreparedStatement / CallableStatement 객체 생성
//
//④ 쿼리 실행
//
//⑤ 쿼리 실행의 결과값(int, ResultSet) 사용
//
//⑥ 사용된 객체 종료(ResultSet, Statement / PreparedStatement / CallableStatement , Connection)
